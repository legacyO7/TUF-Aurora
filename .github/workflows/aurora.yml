# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Aurora CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm i electron-installer-debian
    - run: npm run build --if-present
    - run: npm run deb64
    
    - name: Get current package version
      id: package-version
      uses: martinbeentjes/npm-get-version-action@v1.1.0  
      
    - name: Extract version
      id: extract_version
      uses: Saionaro/extract-package-version@v1.0.6
      # From now you can access the version
    - name: Print version
      run: echo ${{ steps.extract_version.outputs.version }}   
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v${{ steps.extract_version.outputs.version }}  
        release_name: aurora v${{ steps.package-version.outputs.current-version}}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: false
  
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./dist/installers/tuf-aurora.deb
        asset_name: tuf-aurora.deb
        asset_content_type: application/vnd.debian.binary-package
        
